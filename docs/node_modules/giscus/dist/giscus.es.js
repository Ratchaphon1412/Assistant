import { css, LitElement, html } from "lit";
import { property, customElement } from "lit/decorators.js";
import { createRef, ref } from "lit/directives/ref.js";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
let GiscusWidget = class extends LitElement {
  constructor() {
    super();
    this.GISCUS_SESSION_KEY = "giscus-session";
    this.GISCUS_ORIGIN = "https://giscus.app";
    this.ERROR_SUGGESTION = `Please consider reporting this error at https://github.com/giscus/giscus/issues/new.`;
    this.__session = "";
    this._iframeRef = createRef();
    this.messageEventHandler = this.handleMessageEvent.bind(this);
    this.reactionsEnabled = "1";
    this.emitMetadata = "0";
    this.inputPosition = "bottom";
    this.theme = "light";
    this.lang = "en";
    this.loading = "eager";
    this.setupSession();
    window.addEventListener("message", this.messageEventHandler);
  }
  get iframeRef() {
    return this._iframeRef.value;
  }
  connectedCallback() {
    super.connectedCallback();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    window.removeEventListener("message", this.messageEventHandler);
  }
  _formatError(message) {
    return `[giscus] An error occurred. Error message: "${message}".`;
  }
  setupSession() {
    const origin = location.href;
    const url = new URL(origin);
    const savedSession = localStorage.getItem(this.GISCUS_SESSION_KEY);
    const urlSession = url.searchParams.get("giscus") || "";
    if (urlSession) {
      localStorage.setItem(this.GISCUS_SESSION_KEY, JSON.stringify(urlSession));
      this.__session = urlSession;
      url.searchParams.delete("giscus");
      history.replaceState(void 0, document.title, url.toString());
      return;
    }
    if (savedSession) {
      try {
        this.__session = JSON.parse(savedSession || "") || "";
      } catch (e) {
        this.__session = "";
        localStorage.removeItem(this.GISCUS_SESSION_KEY);
        console.warn(`${this._formatError(e == null ? void 0 : e.message)} Session has been cleared.`);
      }
    }
  }
  handleMessageEvent(event) {
    if (event.origin !== this.GISCUS_ORIGIN)
      return;
    const { data } = event;
    if (!(typeof data === "object" && data.giscus))
      return;
    if (this.iframeRef && data.giscus.resizeHeight) {
      this.iframeRef.style.height = `${data.giscus.resizeHeight}px`;
    }
    if (!data.giscus.error)
      return;
    const message = data.giscus.error;
    if (message.includes("Bad credentials") || message.includes("Invalid state value")) {
      if (localStorage.getItem(this.GISCUS_SESSION_KEY) !== null) {
        localStorage.removeItem(this.GISCUS_SESSION_KEY);
        this.__session = "";
        console.warn(`${this._formatError(message)} Session has been cleared.`);
        this.update(/* @__PURE__ */ new Map());
        return;
      }
      console.error(`${this._formatError(message)} No session is stored initially. ${this.ERROR_SUGGESTION}`);
    }
    if (message.includes("Discussion not found")) {
      console.warn(`[giscus] ${message}. A new discussion will be created if a comment/reaction is submitted.`);
      return;
    }
    console.error(`${this._formatError(message)} ${this.ERROR_SUGGESTION}`);
  }
  sendMessage(message) {
    var _a, _b;
    (_b = (_a = this.iframeRef) == null ? void 0 : _a.contentWindow) == null ? void 0 : _b.postMessage({ giscus: message }, this.GISCUS_ORIGIN);
  }
  updateConfig() {
    const setConfig = {
      setConfig: {
        repo: this.repo,
        repoId: this.repoId,
        category: this.category,
        categoryId: this.categoryId,
        term: this.getTerm(),
        number: +this.getNumber(),
        reactionsEnabled: this.reactionsEnabled === "1",
        emitMetadata: this.emitMetadata === "1",
        inputPosition: this.inputPosition,
        theme: this.theme,
        lang: this.lang
      }
    };
    this.sendMessage(setConfig);
  }
  requestUpdate(name, oldValue, options) {
    if (!this.hasUpdated) {
      super.requestUpdate(name, oldValue, options);
      return;
    }
    this.updateConfig();
  }
  _getOgMetaContent(property2) {
    const element = document.querySelector(`meta[property='og:${property2}'],meta[name='${property2}']`);
    return element ? element.content : "";
  }
  _getCleanedUrl() {
    const url = new URL(location.href);
    url.searchParams.delete("giscus");
    return url;
  }
  getTerm() {
    switch (this.mapping) {
      case "url":
        return `${this._getCleanedUrl()}`;
      case "title":
        return document.title;
      case "og:title":
        return this._getOgMetaContent("title");
      case "specific":
        return this.term || "";
      case "number":
        return "";
      case "pathname":
      default:
        return location.pathname.length < 2 ? "index" : location.pathname.substring(1).replace(/\.\w+$/, "");
    }
  }
  getNumber() {
    return this.mapping === "number" && this.term || "";
  }
  getIframeSrc() {
    const url = this._getCleanedUrl();
    const origin = `${url}${this.id ? "#" + this.id : ""}`;
    const description = this._getOgMetaContent("description");
    const params = {
      origin,
      session: this.__session,
      repo: this.repo,
      repoId: this.repoId || "",
      category: this.category || "",
      categoryId: this.categoryId || "",
      term: this.getTerm(),
      number: this.getNumber(),
      reactionsEnabled: this.reactionsEnabled,
      emitMetadata: this.emitMetadata,
      inputPosition: this.inputPosition,
      theme: this.theme,
      description
    };
    const locale = this.lang ? `/${this.lang}` : "";
    const searchParams = new URLSearchParams(params);
    return `${this.GISCUS_ORIGIN}${locale}/widget?${searchParams}`;
  }
  render() {
    return html`
      <iframe
        scrolling="no"
        ${ref(this._iframeRef)}
        src=${this.getIframeSrc()}
        loading=${this.loading}
        part="iframe"
      ></iframe>
    `;
  }
};
GiscusWidget.styles = css`
    :host,
    iframe {
      width: 100%;
      border: none;
      color-scheme: normal;
      min-height: 150px;
    }
  `;
__decorateClass([
  property({ reflect: true })
], GiscusWidget.prototype, "repo", 2);
__decorateClass([
  property({ reflect: true })
], GiscusWidget.prototype, "repoId", 2);
__decorateClass([
  property({ reflect: true })
], GiscusWidget.prototype, "category", 2);
__decorateClass([
  property({ reflect: true })
], GiscusWidget.prototype, "categoryId", 2);
__decorateClass([
  property({ reflect: true })
], GiscusWidget.prototype, "mapping", 2);
__decorateClass([
  property({ reflect: true })
], GiscusWidget.prototype, "term", 2);
__decorateClass([
  property({ reflect: true })
], GiscusWidget.prototype, "reactionsEnabled", 2);
__decorateClass([
  property({ reflect: true })
], GiscusWidget.prototype, "emitMetadata", 2);
__decorateClass([
  property({ reflect: true })
], GiscusWidget.prototype, "inputPosition", 2);
__decorateClass([
  property({ reflect: true })
], GiscusWidget.prototype, "theme", 2);
__decorateClass([
  property({ reflect: true })
], GiscusWidget.prototype, "lang", 2);
__decorateClass([
  property({ reflect: true })
], GiscusWidget.prototype, "loading", 2);
GiscusWidget = __decorateClass([
  customElement("giscus-widget")
], GiscusWidget);
export { GiscusWidget };
